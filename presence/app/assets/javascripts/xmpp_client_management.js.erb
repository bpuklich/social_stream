////////////////////
//Global constants
////////////////////
var domain = '<%=SocialStream::Presence.domain%>';


////////////////////
//Hash tables
////////////////////

//Keys: Social Stream Chat Status
//Value: Xmpp status
var sstreamChatStatus = new Array();
sstreamChatStatus['available'] = "chat";
sstreamChatStatus['away'] = "away";
sstreamChatStatus['autoaway'] = "away";
sstreamChatStatus['dnd'] = "dnd";

//Keys: Xmpp status
//Value: Message associated with Xmpp Status
var statusMessage = new Array();
statusMessage[''] = "";
statusMessage['chat'] = "";
statusMessage['away'] = "Away";
statusMessage['xa'] = "Away";
statusMessage['dnd'] = "Busy";

//Keys: Xmpp status
//Value: Icon name (Same as Social Stream Status)
var statusIcons = new Array();
statusIcons[''] = "available";
statusIcons['chat'] = "available";
statusIcons['away'] = "away";
statusIcons['xa'] = "away";
statusIcons['dnd'] = "dnd";



////////////////////
//Connect functions
////////////////////

function connectToChat(user_jid,cookie,password){
	
	if (isStropheConnected()){
    return true;
  } 
		
	if (authByCookie()){
    if (connectToServerWithCookie(user_jid, cookie)==false){
      refreshChatWindow();
    }
  } else {
    if (connectToServerWithPassword(user_jid,password)==false){
      refreshChatWindow();
    }
  }       
}


function isStropheConnected(){
  if((connection!=null)&&(connection.connected)){
      return true;
    } else {
      return false;
    }
}


function connectToServerWithCookie(user_jid, cookie){ 
    try {
      connection = new Strophe.Connection(BOSH_SERVICE);
      connection.connect(user_jid, cookie, onConnect);
    } catch (err) {
      //"Handle errors"
      return false;
    }
		return true;
}


//Password: Get from chatPassword param if exists, instead try to get from sessionStorage.
function connectToServerWithPassword(user_jid, chatPassword){
    
    //Get Password
    if ((chatPassword!=null)&&(chatPassword!="")){
      var password = chatPassword;
    } else if ((window.sessionStorage)&&(sessionStorage.getItem("ss_user_pass") != null)) {
      var password = sessionStorage.getItem("ss_user_pass");
    } else {
      return false;
    }
    
    try {
        //Connect actual user to the chat
        connection = new Strophe.Connection(BOSH_SERVICE);
        connection.connect(user_jid, password, onConnect);
    } catch (err) {
        //"Handle errors"
        return false;
    }

    return true;
}


////////
//Auth Methods
///////
function authByCookie(){
  var authMethod = '<%= SocialStream::Presence.auth_method %>';
  return authMethod=="cookie";
}

function authByPassword(){
  var authMethod = '<%= SocialStream::Presence.auth_method %>';
  return authMethod=="password";
}


////////////////////
//Stanza management using Strophe
////////////////////

//Global variables
var userStatus;
var awayTimerPeriod = 60000;
var timerPeriod = 5000;
var refreshMinTime = 3*timerPeriod;
var awayTime = 10*60000; //10 minutes
var awayCounter = 0;
var timerCounter = 0;
var connection = null;
var reconnectAttempts = 3;
var awayTimer;
var timer;
var reconnectTimer;
var disconnectionFlag = true;
var afterNewConnectionFlag = false;
var afterFirstConnectionFlag = true;
var requestContacts=false;
var cyclesToRefresh = (refreshMinTime/timerPeriod);


function onConnect(status) {
  
  //Status.ERROR An error has occurred
  //Status.CONNECTING The connection is currently being made
  //Status.CONNFAIL The connection attempt failed
  //Status.AUTHENTICATING The connection is authenticating
  //Status.AUTHFAIL The authentication attempt failed
  //Status.CONNECTED  The connection has succeeded
  //Status.DISCONNECTED The connection has been terminated
  //Status.DISCONNECTING  The connection is currently being terminated
  //Status.ATTACHED The connection has been attached
  
  log('Strophe onConnect callback call with status ' + status);
  
  if (status == Strophe.Status.ATTACHED){
    log('Strophe connection attached');
    return;
  } 
  
  if (status == Strophe.Status.AUTHENTICATING ){
    log('Strophe connection AUTHENTICATING');
    return;
  }
  
  if (status == Strophe.Status.CONNECTING) {
    log('Strophe is connecting.');
    return;
  } 
  
  if (status == Strophe.Status.DISCONNECTING) {
    log('Strophe is disconnecting.');
    return;
  } 
    
  clearTimeout(initialTimer);
    
  if (status == Strophe.Status.CONNFAIL) {
    log('Strophe failed to connect.');
    reconnectTimer = setTimeout ("onReconnect()", 5000);
    disconnectionFlag = true;
  } else if (status == Strophe.Status.AUTHFAIL) {
    log('Strophe authentication fail.');
      if ((window.sessionStorage)&&(sessionStorage.getItem("ss_user_pass") != null)){
        sessionStorage.setItem("ss_user_pass",null);
      }
      disconnectionFlag = true;
  } else if (status == Strophe.Status.ERROR) {
    log('Strophe error.');
    disconnectionFlag = true;
  } else if (status == Strophe.Status.DISCONNECTED) {
    log('Strophe is disconnected.');
    disconnectionFlag = true;
    clearTimeout(awayTimer);
    notifyWhenUsersDisconnect();
    reconnectTimer = setTimeout ("onReconnect()", 5000);
  } else if (status == Strophe.Status.CONNECTED) {
    //AFTER CONNECT ACTIONS
    
    log('Strophe is connected.');
		
    clearTimeout(reconnectTimer);
		
    //addHandler:(callback, namespace to match, stanza name, stanza type, stanza id , stanza from, options)
    connection.addHandler(onMessage, null, 'message', null, null,  null);
    connection.addHandler(onPresence, null, 'presence', null, null,  null); 
		connection.addHandler(onIQStanza,null, "iq", null, null);

		
    disconnectionFlag = false;
    afterNewConnectionFlag = true;
		
		log('Presenze stanza send for:' + connection.jid);
		userStatus = getRestoreUserChatStatus();
		if(userStatus=="offline"){
			userStatus="chat";
		}
    sendStatus(userStatus);
		
    awayTimer = setInterval("awayTimerFunction()", awayTimerPeriod);
    timer = setInterval("timerFunction()", timerPeriod);
  }
	 
	 updateChatWindow();
}

function onReconnect(){
  
  if ((!isStropheConnected())&&(userStatus!="offline")) {
    
    if (reconnectAttempts>0) {
      reconnectAttempts--;
      
			changeChatHeaderTitle(I18n.t('chat.reconnecting'))
			
			connectToChat(user_jid,cookie,null);
			
      reconnectTimer = setTimeout ("onReconnect()", 9000);
			
    } else {
			changeChatHeaderTitle(I18n.t('chat.unableconnect'))
      //Notify issue to Rails App Server?
    }
    
  }
}


function disconnectStrophe(){
  userStatus = "offline";
  setStatusWidgetTitle("offline");
  
  if(isStropheConnected()){
    connection.send($pres({type: "unavailable"}).tree()); 
    connection.disconnect();
  } 
}


////////
//Manage Message stanzas
///////
function onMessage(msg) {
    var to = msg.getAttribute('to');
    var from = msg.getAttribute('from');
    var type = msg.getAttribute('type');
    var elems = msg.getElementsByTagName('body');

    if (type == "chat" && elems.length > 0) {
      var body = elems[0];
      var from_slug = from.split("@")[0];
      var from_jid = from_slug + "@" + domain;
    
      putReceivedMessageOnChatWindow(from_jid,from_slug,body,null)  
    }

    // we must return true to keep the handler alive.  
    // returning false would remove it after it finishes.
    return true;
}


////////
//Manage Presence stanzas
///////
function onPresence(presence) {
    
		log(presence)
		
    //Check presence stanza type
    var ptype = $(presence).attr('type');
        
    switch (ptype){
      case undefined:
       processAvailablePresenceStanza(presence)
       break;
      case "available":
        processAvailablePresenceStanza(presence)
        break;
      case "unavailable":
        processUnavailablePresenceStanza(presence)
        break;
      default : 
        //Stanza type not recognize
        processAvailablePresenceStanza(presence)
    }
          
  return true;
} 


function processAvailablePresenceStanza(presence){
  var from = $(presence).attr('from');
  var slug = from.split("@")[0];
  
  if (slug != user_slug) {
    if (getConnectionBoxFromSlug(slug)!=null){
      var status = $(presence).find('show').text(); 
      setUserIconStatus(slug,status);
			updateInterfaceAfterPresenceStanza(slug,true);
    } else {
			if(! isAdminSlug(slug)){
				setTimeout("refreshChatWindow()", 3000);
			}
    }
  }   
}

function processUnavailablePresenceStanza(presence){
  var from = $(presence).attr('from');
  var slug = from.split("@")[0];
  
  if (slug != user_slug) {
    if (getConnectionBoxFromSlug(slug)!=null){
			updateInterfaceAfterPresenceStanza(slug,false)
    }
  }
}


////////
//Manage IQ stanzas
///////
function onIQStanza(iq){
  
	var from = iq.getAttribute("from");
	var slug = from.split("@")[0];
	
	if (slug == user_slug) {
		return;
  }
	
	var queryElements = iq.getElementsByTagName('query');

  if (queryElements.length > 0) {
    var query = queryElements[0];
		var type = query.getAttribute("xmlns");
		
		if( type == "jabber:iq:version"){
			var iqID = iq.getAttribute("id");
			
			//Response to client info request.
			sendIQStanzaWithClientInfo(from,iqID);
		}
	}

	return true;
}


function sendIQStanzaWithClientInfo(jid,iqID){
	var client = "Social Stream XMPP Client"
	var version = '<%=SocialStream::Presence::VERSION%>';
	var iq = $iq({to: jid, type: "result", id: iqID})
  .c("query", {xmlns: "jabber:iq:version"}).c("name").t(client).up().c("version").t(version);
	connection.sendIQ(iq);
}


var iqIDNumber = 1000;
function sendIQStanzaForRequestClientInfo(jid){
  //var client = "Social Stream XMPP Client"
  //var version = '<%=SocialStream::Presence::VERSION%>';
  //var iq = $iq({to: jid, type: "result", id: iqID})
  //.c("query", {xmlns: "jabber:iq:version"}).c("name").t(client).up().c("version").t(version);
  //connection.sendIQ(iq);
}


function iqSuccess(){
	log("iq sucess")
}

function iqFail(){
	log("iq fail")
}


////////
//Send Message stanzas
///////
function sendChatMessage(from,to,text){
    var type = "chat";
    var body= $build("body");
    body.t(text);
    var message = $msg({to: to, from: from, type: 'chat'}).cnode(body.tree());
    connection.send(message.tree());      
    restartAwayTimer();
    return true;
}


////////
//Send Presence stanzas with status
///////
function sendStatus(status){
	
	  if((status in sstreamChatStatus)){
      status = sstreamChatStatus[status];
    }
	
    if (status in statusMessage){
      //Send status to the XMPP Server
      var pres = $pres()
      .c('status')
      .t(statusMessage[status]).up() //Status message
      .c('show')
      .t(status);
       connection.send(pres.tree());
       setStatusWidgetTitle(status);
    }
}
